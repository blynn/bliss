Thu Jul  1 10:27:25 PDT 2004

Fixed a couple of bugs: ins->maxport wasn't being initialized correctly,
and note->gendata was requesting too much memory.

[bliss-0.1.0.tgz]

Wed Jun 30 14:06:55 PDT 2004

Can record to a single track.

...

Can "render" single track as WAV. (Writes to "bliss.wav" for now.)

Wed Jun 30 01:13:00 PDT 2004

Save and load works, though error checking is desperately needed.

...

Hacked together a routine that lets the user play notes using the keyboard.

Tue Jun 29 22:48:00 PDT 2004

Implemented "New" on menu.

Mon Jun 28 17:47:53 PDT 2004

Started cleaning up widget code. "About..." window implemented.

Fri Jun 25 10:07:35 PDT 2004

Added selectable edges. Can delete edges.

I don't like the command panel buttons changing depending on what's been
selected. Node/edge-specific commands should be on the panel with the settings.

Thu Jun 24 08:18:59 PDT 2004

Can set parameters.

Thinking of changing command panel buttons depending on what's selected.
e.g. new units can be placed when nothing is selected, otherwise there are
commands like "delete" and "reset".

Funny bug: I named a function "connect", forgetting that it's also the name
of a system call. SDL_Init calls it during video initialization.

I've noticed my program is too slow for smooth audio under 2.4 kernels,

Wed Jun 23 12:12:51 PDT 2004

ADSR envelope. Intend to have a more generic envelope generator, one that's
specified by a list of points. Decided not to implement a trigger built-in
generator yet, because it can be emulated with ADSR. (Set A,D,R = 0, S = 1.)

Delay is troublesome. I tried coding "for all units, for all notes, calculate",
rather than "for all notes, for all units, calculate", but it's much slower.
It's also a hassle to mix and match units which calculate outputs differently.

...

GUI is taking a lot of CPU. Speeded things up immensely by only updating when
necessary. Code is a lot messier though.

Wed Jun 23 08:48:49 PDT 2004

Added struct widget_s to help simplify the code.

A bug that took a while to find: I had "void *"s where I should
have had "void **"s. No warnings if I switch them up.

Tue Jun 22 10:00:51 PDT 2004

Trying to get the fine details of each widget right,
e.g. highlights and shadows, menu and button behaviour.

Mon Jun 21 09:56:42 PDT 2004

Hacked up a textbox widget. Enough code to use GUI to build instruments
that were constructed in my original "test" program.

Mon Jun 21 00:40:33 PDT 2004

GUI coming along. Can drag machines, make connections.

Sat Jun 19 11:55:22 PDT 2004

Have very basic parser. Note when setting the program of a "funk" node,
it doesn't check that the node is indeed holding a "funk" unit.

Fri Jun 18 11:51:18 PDT 2004

New design in place, back to where I was. Program is more time-consuming,
but much more flexible, e.g. can double input frequency and send through
another oscillator, and then combine outputs so that octaves are played
when a note is struck.

"funk" unit takes any function and applies it to inputs.

Next: parser for funk boxes, ADSR, GUI

Thu Jun 17 14:35:22 PDT 2004 

After some thought, decided to change design yet again. Problem with current
approach: need an oscillator generator, and an oscillator effect, causing
a lot of duplicate code. Also, not clear how to design a instrument that plays
octaves from modules for instance.

New approach: instrument will hold note list, and notes won't be combined
until the very end. The input frequency and amplitude can be fed anywhere.
I just need to think about where the ADSR envelope goes, and how to decide
when a note can be freed.

For now, instrument will have ADSR settings which control note lifespan.

Just in case, I'll retain generator parameters.

Thu Jun 17 00:52:28 PDT 2004

For now an effect will be considered a variant of a generator.

Wed Jun 16 12:55:21 PDT 2004

Graph code. Simple LPF.

Changed darray.c so that remove doesn't decrement the index if the
element is not found. Also added darray_remove_index()

Tue Jun 15 12:23:20 PDT 2004

It seems the instrument code should handle memory allocation of notes because
a note off event does not necessarily mean notes are destroyed.

Rudimentary envelope works. Notes fade in and out.

Tue Jun 15 03:17:35 PDT 2004

Redesigning the project:

Buzz compatibility no longer a top priority.
I want to have it so that I can play notes on my digital piano and have
interesting noises come out. That means it's easiest to design things around
the MIDI standard, so I'll have note on/note off events rather than note
lengths, note velocities, and note effects.

I'll separate GUI code from rest of stuff, so I won't get distracted by
too many things at once.

A rough game plan:

1. A MIDI-style instrument: a sine wave times volume times ADSR-style envelope.
2. Add LPF with adjustable cutoff.
3. Generalize a little, so can use other oscillators, trackers, etc.
4. Add GUI.

My old code was not all in vain. Hack together a Frankensteinesque
prototype by piecing together old parts from dead projects. In almost no time
I could play notes on my digital piano and hear sinusoids.

Time-consuming: had a global dynamic array of notes to play. Two threads were
accessing it causing a race condition. So it was crashing randomly and it
didn't occur to me it was a threading problem until I put in a lot of printfs
and found it was crashing at all sorts of places. Fixed it by getting
rid of the separate audio buffering thread.

Got rid of the audio buffer for now.

Tue Apr  5 14:58:45 PDT 2005

Modified play_thread() to allow for variations in SDL's timer functions,
so that timing errors don't build up.

[bliss-0.1.3.tgz]

Tue Apr  5 03:28:44 PDT 2005

Moved code from gui.c to bliss.c (play_state stuff mostly), cleaned
render function slightly.

Mon Apr  4 13:45:41 PDT 2005

Changed gen_index behaviour in voice.c to the better ins.c one.

Double-click on the output node now goes up a level. Output nodes now
have a different colour.

Mon Apr  4 05:12:54 PDT 2005

Added gen_index_table to ins.c too and successfully reenabled z-order changing
in canvas.c

Sun Apr  3 23:20:54 PDT 2005

Corrected malloc bugs in funk.c: had sizeof(char) instead of sizeof(char *),
also seems to be some off-by-one errors. No longer crashes on exit.

Had to disable z-order change on node selection in canvas.c because it
messes with the gen_index order in voice.c. gen_index needs revamping
in general e.g. it is not updated on node deletion in voice.c.

Started using scons instead of make for Linux builds at least.
It appears better, intend to migrate to it completely.

Changed the way gen_index works in voice.c. Once I do the same in ins.c,
I can reinstate z-order changing in canvas.c

Sat Apr  2 21:27:47 PST 2005

Double-click on a ins/voice enters it.
Plays the other tracks while recording.

Fri Apr  1 12:39:13 PST 2005

Got rid of graph callbacks. Render works again.

Fri Apr  1 02:33:14 PST 2005

One track per instrument finally works.

Thu Mar 31 16:37:21 PST 2005

Implementing one track per instrument.

Mon Mar 28 01:21:02 PST 2005

I no longer like using callbacks for communication between
the "canvas", "aux_rect" and "command panel".

...

More cleanup. Instruments no longer get an "out" unit during initialization.
Graph ADT didn't maintain edge_lists properly and had some vestigial code
that needed removing.

Sun Mar 27 05:33:18 PST 2005

Decided to get rid of layout.[ch] and have the node data structure
store x, y coordinates.

Wed Sep  8 15:47:15 PDT 2004

Fixed menu entry bug (pushed flag not initialized).

Wed Aug  4 14:11:55 PDT 2004

More cleanup.

Tue Aug  3 13:09:34 PDT 2004

Changed code to allow for multiple instruments.

Mon Aug  2 11:45:08 PDT 2004

Minor cleanup.

[bliss-0.1.2.tgz]

Added screenshot taker (press F12).

Sun Aug  1 20:18:30 PDT 2004

Implemented unit/voice deletion.

Moved canvas code to canvas.c.

Added very basic configuration file code.
It loads "config.txt" and parses strings (assuming the input is nice).
Can change audio latency.

Sat Jul 31 14:26:40 PDT 2004

Can have effects at the instrument level.

Changed file format so save and load work with them.

Thu Jul 29 11:56:55 PDT 2004

Added graph_s structure. Modified voice.c to use it.

Sat Jul 24 14:00:47 PDT 2004

Wrote a proper delay unit. Can do feedback, hence basic digital waveguide
synthesis, e.g.  Karplus-Strong string sound, but since the "output"
variable is shared by all notes, it only works when one note is played
at a time.

Changed it so that each note has a dedicated output per node, allowing
polyphonic voices that use feedback. (Old code is still in file.)

Fri Jul 23 12:44:51 PDT 2004

Cleaned up GUI code some more. No longer have "textbox_selection"
or "display_window" kludges.

Thu Jul 22 13:01:40 PDT 2004

I tried my cross-compiled program on Windows (98 and XP) and audio dropouts
occur all the time. To get bearable audio output, I had to set the latency
in audio.c to at least 2048.

Wed Jul 21 15:45:24 PDT 2004

Moved command panel code to compan.c.
Changed nature of main loop. Polling no longer done.
Instead, timers are used to update the screen and mouse motions.

Tue Jul 20 23:03:57 PDT 2004

Added much-needed hierarchical button structure, i.e. click on "Oscillators"
first and then pick an oscillator.

Added Stomper Hyperion envelopes, found optimizations for "seg" unit.

"osc" unit: reversed sawtooth and found slight optimization,
added triangle wave. Renamed "shape" to "waveform".

Added Stomper Hyperion oscillators. Works just like it, with its various
quirks, except it doesn't do WAVs yet.

My guess is that Stomper uses a two-pole Butterworth filter.
However I don't know what scale the resonance uses.
A cutoff of 1.0 appears to cause the Stomper filter to be a pure resonator
which corresponds with Q = infinity in my code, and 0.0 seems to give zero
resonance, corresponding with Q = 1/sqrt(2) in my code.

Tue Jul 20 14:21:27 PDT 2004

Added "pow" function to "funk".
Can now do a lot of Stomper Hyperion sounds.
Made a drum demo.
Lots of things need fixing, but it's about time for a release.

[bliss-0.1.1.tgz]

Mon Jul 19 23:44:30 PDT 2004

Added keydown callback.
Added one-zero, one-pole, two-pole filters.
"funk" can do basic arithmetic operations.
Reenabled render operation.

Mon Jul 19 00:51:21 PDT 2004

Improved Butterworth lowpass filter, added resonance.
Added Butterworth highpass filter with resonance.

Sun Jul 18 15:22:16 PDT 2004

More cleanup and bugfixes. Added Shepard tone generator.

Sat Jul 17 23:18:28 PDT 2004

Some bugfixes.

Thu Jul 15 19:32:07 PDT 2004

Revamped GUI code. Code is neater and more efficient.

Thu Jul 15 12:57:18 PDT 2004

Decided to put in a more complex screen update design: will use SDL_UpdateRects
instead of hoping the surface is double buffered.

Wed Jul 14 22:56:40 PDT 2004

Added audio buffer. Can load/save files again
(takes multiple voices into account).

Added "darray_forall()". Code looks neater. I use a few nested functions.
I hope I won't have to convert it to standard C!

Trying out event binding system for mouse motion.

Wed Jul 14 10:34:49 PDT 2004

The 4pole lpf seems unstable when the cutoff is lowered quickly to zero.

Wed Jul 14 00:36:39 PDT 2004

Wrote "diffy", a digital filter toy. Place zeros and poles using a mouse
and observe the positive frequency response.

Copied code from blop for a lowpass 4 pole filter.

Bug: notes don't die when they should. My current code is wrong, need to
rethink how to handle note life.

Mon Jul 12 01:41:25 PDT 2004

Wrote noise generator based on one in blop.

Sun Jul 11 13:40:33 PDT 2004

Voices work, but now the interface needs to be tidied up.

Sat Jul 10 13:26:56 PDT 2004

Code cleanup, some speedups. Started adding voices to instruments.
For now, have to disable load, save, render.

Sun Jul  4 11:31:56 PDT 2004

Trying out new layout.

Thu Jul  1 10:27:25 PDT 2004

Fixed a couple of bugs: ins->maxport wasn't being initialized correctly,
and note->gendata was requesting too much memory.

[bliss-0.1.0.tgz]

Wed Jun 30 14:06:55 PDT 2004

Can record to a single track.

Can "render" single track as WAV. (Writes to "bliss.wav" for now.)

Wed Jun 30 01:13:00 PDT 2004

Save and load works, though error checking is desperately needed.

Hacked together a routine that lets the user play notes using the keyboard.

Tue Jun 29 22:48:00 PDT 2004

Implemented "New" on menu.

Mon Jun 28 17:47:53 PDT 2004

Started cleaning up widget code. "About..." window implemented.

Fri Jun 25 10:07:35 PDT 2004

Added selectable edges. Can delete edges.

I don't like the command panel buttons changing depending on what's been
selected. Node/edge-specific commands should be on the panel with the settings.

Thu Jun 24 08:18:59 PDT 2004

Can set parameters.

Thinking of changing command panel buttons depending on what's selected.
e.g. new units can be placed when nothing is selected, otherwise there are
commands like "delete" and "reset".

Funny bug: I named a function "connect", forgetting that it's also the name
of a system call. SDL_Init calls it during video initialization.

I've noticed my program is too slow for smooth audio under 2.4 kernels,

Wed Jun 23 12:12:51 PDT 2004

ADSR envelope. Intend to have a more generic envelope generator, one that's
specified by a list of points. Decided not to implement a trigger built-in
generator yet, because it can be emulated with ADSR. (Set A,D,R = 0, S = 1.)

Delay is troublesome. I tried coding "for all units, for all notes, calculate",
rather than "for all notes, for all units, calculate", but it's much slower.
It's also a hassle to mix and match units which calculate outputs differently.

GUI is taking a lot of CPU. Speeded things up immensely by only updating when
necessary. Code is a lot messier though.

Wed Jun 23 08:48:49 PDT 2004

Added struct widget_s to help simplify the code.

A bug that took a while to find: I had "void *"s where I should
have had "void **"s. No warnings if I switch them up.

Tue Jun 22 10:00:51 PDT 2004

Trying to get the fine details of each widget right,
e.g. highlights and shadows, menu and button behaviour.

Mon Jun 21 09:56:42 PDT 2004

Hacked up a textbox widget. Enough code to use GUI to build instruments
that were constructed in my original "test" program.

Mon Jun 21 00:40:33 PDT 2004

GUI coming along. Can drag machines, make connections.

Sat Jun 19 11:55:22 PDT 2004

Have very basic parser. Note when setting the program of a "funk" node,
it doesn't check that the node is indeed holding a "funk" unit.

Fri Jun 18 11:51:18 PDT 2004

New design in place, back to where I was. Program is more time-consuming,
but much more flexible, e.g. can double input frequency and send through
another oscillator, and then combine outputs so that octaves are played
when a note is struck.

"funk" unit takes any function and applies it to inputs.

Next: parser for funk boxes, ADSR, GUI

Thu Jun 17 14:35:22 PDT 2004 

After some thought, decided to change design yet again. Problem with current
approach: need an oscillator generator, and an oscillator effect, causing
a lot of duplicate code. Also, not clear how to design a instrument that plays
octaves from modules for instance.

New approach: instrument will hold note list, and notes won't be combined
until the very end. The input frequency and amplitude can be fed anywhere.
I just need to think about where the ADSR envelope goes, and how to decide
when a note can be freed.

For now, instrument will have ADSR settings which control note lifespan.

Just in case, I'll retain generator parameters.

Thu Jun 17 00:52:28 PDT 2004

For now an effect will be considered a variant of a generator.

Wed Jun 16 12:55:21 PDT 2004

Graph code. Simple LPF.

Changed darray.c so that remove doesn't decrement the index if the
element is not found. Also added darray_remove_index()

Tue Jun 15 12:23:20 PDT 2004

It seems the instrument code should handle memory allocation of notes because
a note off event does not necessarily mean notes are destroyed.

Rudimentary envelope works. Notes fade in and out.

Tue Jun 15 03:17:35 PDT 2004

Redesigning the project:

Buzz compatibility no longer a top priority.
I want to have it so that I can play notes on my digital piano and have
interesting noises come out. That means it's easiest to design things around
the MIDI standard, so I'll have note on/note off events rather than note
lengths, note velocities, and note effects.

I'll separate GUI code from rest of stuff, so I won't get distracted by
too many things at once.

A rough game plan:

1. A MIDI-style instrument: a sine wave times volume times ADSR-style envelope.
2. Add LPF with adjustable cutoff.
3. Generalize a little, so can use other oscillators, trackers, etc.
4. Add GUI.

My old code was not all in vain. Hack together a Frankensteinesque
prototype by piecing together old parts from dead projects. In almost no time
I could play notes on my digital piano and hear sinusoids.

Time-consuming: had a global dynamic array of notes to play. Two threads were
accessing it causing a race condition. So it was crashing randomly and it
didn't occur to me it was a threading problem until I put in a lot of printfs
and found it was crashing at all sorts of places. Fixed it by getting
rid of the separate audio buffering thread.

Got rid of the audio buffer for now.
